trigger: none

parameters:
  - name: areaPath
    type: string
    default: 'Enterprise Data Warehouse\\Data and Analytics'
    displayName: 'Choose Area Path'
  - name: featureTitle
    type: string
    default: ''
    displayName: 'Feature Title (required)'

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    set -euo pipefail

    # Parameters from pipeline input
    AREA_PATH="${{ parameters.areaPath }}"
    FEATURE_TITLE="${{ parameters.featureTitle }}"
    
    if [ -z "$FEATURE_TITLE" ]; then
      echo "‚ùå Feature Title parameter is required."
      exit 1
    fi

    ORG="sovereignhousingassociationvsts"
    PROJECT="Enterprise%20Data%20Warehouse"
    EPIC_ID="108342"

    FEATURE_DESC="As per ADO template"

    USER_STORIES=(
      "Discovery|Initial background work as needed"
      "Scoping|Documented in ADO Feature"
      "Report mock-up|Evidenced in PPT or PBI"
      "Sourcing data|XL template complete and request raised with Data Engineers"
      "Data modelling|XL template complete and request raised with Data Engineers"
      "Definitions documented|Word document with sign off from stakeholders. Once agreed, enter into Purview"
      "Data validation|Dev dataset back from Data Engineers for initial data checks. Advise when complete"
      "DAX measure creation|Master dataset back from Data Engineers for DAX measure creation. Any amendments, notify Data Engineers"
      "UAT report build|Build report out from master dataset. Arrange end user testing"
      "Sign off|Completion of testing and final sign off"
    )

    echo "Creating Feature: $FEATURE_TITLE in Area Path: $AREA_PATH"

    FEATURE_JSON=$(jq -n --arg title "$FEATURE_TITLE" --arg desc "$FEATURE_DESC" --arg area "$AREA_PATH" --arg epic_url "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems/$EPIC_ID" '[ 
      {"op":"add","path":"/fields/System.Title","value":$title},
      {"op":"add","path":"/fields/System.Description","value":$desc},
      {"op":"add","path":"/fields/System.AreaPath","value":$area},
      {"op":"add","path":"/relations/-","value":{
        "rel":"System.LinkTypes.Hierarchy-Reverse",
        "url": $epic_url
      }}
    ]')

    RESPONSE=$(curl -s -X POST \
      -H "Content-Type: application/json-patch+json" \
      -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
      --data "$FEATURE_JSON" \
      "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems/\$Feature?api-version=7.0")

    FEATURE_ID=$(echo "$RESPONSE" | jq -r '.id')

    if [ "$FEATURE_ID" = "null" ] || [ -z "$FEATURE_ID" ]; then
      echo "‚ùå Failed to create Feature."
      echo "$RESPONSE"
      exit 1
    fi

    echo "‚úÖ Feature created with ID: $FEATURE_ID"

    echo "Creating User Stories with StackRank to maintain order..."

    STACKRANK_BASE=1000
    INDEX=0

    for story in "${USER_STORIES[@]}"; do
      TITLE="${story%%|*}"
      DESC="${story#*|}"
      STACKRANK=$(($STACKRANK_BASE + $INDEX * 100))

      US_JSON=$(jq -n --arg title "$TITLE" --arg desc "$DESC" --arg area "$AREA_PATH" --arg feature_url "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems/$FEATURE_ID" --argjson stackrank "$STACKRANK" '[ 
        {"op":"add","path":"/fields/System.Title","value":$title},
        {"op":"add","path":"/fields/System.Description","value":$desc},
        {"op":"add","path":"/fields/System.AreaPath","value":$area},
        {"op":"add","path":"/fields/Microsoft.VSTS.Common.StackRank","value":$stackrank},
        {"op":"add","path":"/relations/-","value":{
          "rel":"System.LinkTypes.Hierarchy-Reverse",
          "url": $feature_url
        }}
      ]')

      RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json-patch+json" \
        -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
        --data "$US_JSON" \
        "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems/\$User%20Story?api-version=7.0")

      US_ID=$(echo "$RESPONSE" | jq -r '.id')

      if [ "$US_ID" = "null" ] || [ -z "$US_ID" ]; then
        echo "‚ùå Failed to create User Story: $TITLE"
        echo "$RESPONSE"
        exit 1
      fi

      echo "   ‚ûï Created User Story: $TITLE (ID: $US_ID) with StackRank: $STACKRANK"

      INDEX=$((INDEX + 1))
    done

    echo
    echo "Verifying StackRank on created User Stories..."

    for story in "${USER_STORIES[@]}"; do
      TITLE="${story%%|*}"

      WIQL_QUERY=$(jq -n --arg title "$TITLE" --arg area "$AREA_PATH" '{query: "Select [System.Id], [System.Title], [Microsoft.VSTS.Common.StackRank] From WorkItems Where [System.Title] = \"\($title)\" And [System.AreaPath] = \"\($area)\""}')

      SEARCH_URL="https://dev.azure.com/$ORG/$PROJECT/_apis/wit/wiql?api-version=7.0"

      RESULT=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
        --data "$WIQL_QUERY" \
        "$SEARCH_URL")

      ITEM_IDS=$(echo "$RESULT" | jq -r '.workItems[].id')

      for ID in $ITEM_IDS; do
        ITEM_DETAIL=$(curl -s -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems/$ID?fields=System.Title,Microsoft.VSTS.Common.StackRank&api-version=7.0")
        TITLE_FIELD=$(echo "$ITEM_DETAIL" | jq -r '.fields["System.Title"]')
        RANK_FIELD=$(echo "$ITEM_DETAIL" | jq -r '.fields["Microsoft.VSTS.Common.StackRank"]')
        echo "User Story '$TITLE_FIELD' has StackRank: $RANK_FIELD"
      done
    done

    echo
    echo "üéØ All work items created and verified successfully."

  displayName: 'Create Feature and Ordered User Stories'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
