trigger: none

parameters:
  - name: featureTitle
    type: string
    displayName: 'Feature Title'
    default: ''
  - name: parentInput
    type: string
    displayName: 'Parent Work Item URL or ID'
    default: ''

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    set -euo pipefail

    ORG="sovereignhousingassociationvsts"
    PROJECT="Enterprise Data Warehouse"
    PROJECT_URL_ENCODED="Enterprise%20Data%20Warehouse"

    FEATURE_TITLE="${{ parameters.featureTitle }}"
    if [[ -z "$FEATURE_TITLE" ]]; then
      echo "‚ùå Feature Title must be provided."
      exit 1
    fi

    PARENT_INPUT="${{ parameters.parentInput }}"

    function extract_id() {
      local input="$1"
      if [[ "$input" =~ ^[0-9]+$ ]]; then
        echo "$input"
      else
        local id=$(echo "$input" | grep -oE '[0-9]+' | tail -1)
        echo "$id"
      fi
    }

    if [[ -z "$PARENT_INPUT" ]]; then
      echo "No parent work item specified. Defaulting to Epic ID 108342 and fixed Area Path."
      EPIC_ID="108342"
      AREA_PATH="Enterprise Data Warehouse\\Data and Analytics"
    else
      EPIC_ID=$(extract_id "$PARENT_INPUT")
      if [[ -z "$EPIC_ID" ]]; then
        echo "‚ùå Could not extract work item ID from input: $PARENT_INPUT"
        exit 1
      fi

      WORK_ITEM_URL="https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$EPIC_ID?api-version=7.0"
      echo "Fetching work item details from: $WORK_ITEM_URL"

      RESPONSE=$(curl -sS -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" "$WORK_ITEM_URL")

      AREA_PATH=$(echo "$RESPONSE" | jq -r '.fields["System.AreaPath"] // empty')

      if [[ -z "$AREA_PATH" || "$AREA_PATH" == "null" ]]; then
        echo "‚ùå Could not retrieve Area Path for work item ID $EPIC_ID"
        echo "Response was: $RESPONSE"
        exit 1
      fi

      echo "Using Area Path: $AREA_PATH"
    fi

    USER_STORIES=(
      "Discovery|Initial background work as needed"
      "Scoping|Documented in ADO Feature"
      "Report mock-up|Evidenced in PPT or PBI"
      "Sourcing data|XL template complete and request raised with Data Engineers"
      "Data modelling|XL template complete and request raised with Data Engineers"
      "Definitions documented|Word document with sign off from stakeholders. Once agreed, enter into Purview"
      "Data validation|Dev dataset back from Data Engineers for initial data checks. Advise when complete"
      "DAX measure creation|Master dataset back from Data Engineers for DAX measure creation. Any amendments, notify Data Engineers"
      "UAT report build|Build report out from master dataset. Arrange end user testing"
      "Sign off|Completion of testing and final sign off"
    )

    function az_curl() {
      local method=$1
      local url=$2
      local data=${3:-}

      local tries=0
      local max_tries=3
      local response

      until [[ $tries -ge $max_tries ]]
      do
        if [[ -z "$data" ]]; then
          response=$(curl -sS -X "$method" -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" "$url") && break
        else
          response=$(curl -sS -X "$method" -H "Content-Type: application/json-patch+json" -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" --data "$data" "$url") && break
        fi
        ((tries++))
        echo "‚ö†Ô∏è Retry #$tries for $method $url"
        sleep 2
      done

      if [[ $tries -ge $max_tries ]]; then
        echo "‚ùå Failed $method $url after $max_tries attempts."
        exit 1
      fi

      echo "$response"
    }

    echo "Creating Feature: $FEATURE_TITLE"

    EPIC_URL="https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$EPIC_ID"

    FEATURE_JSON=$(jq -n --arg title "$FEATURE_TITLE" --arg desc "As per ADO template" --arg area "$AREA_PATH" --arg epic_url "$EPIC_URL" '[
      {"op":"add","path":"/fields/System.Title","value":$title},
      {"op":"add","path":"/fields/System.Description","value":$desc},
      {"op":"add","path":"/fields/System.AreaPath","value":$area},
      {"op":"add","path":"/relations/-","value":{
        "rel":"System.LinkTypes.Hierarchy-Reverse",
        "url": $epic_url
      }}
    ]')

    FEATURE_CREATE_URL="https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/\$Feature?api-version=7.0"

    RESPONSE=$(az_curl POST "$FEATURE_CREATE_URL" "$FEATURE_JSON")

    FEATURE_ID=$(echo "$RESPONSE" | jq -r '.id')

    if [[ "$FEATURE_ID" == "null" || -z "$FEATURE_ID" ]]; then
      echo "‚ùå Failed to create Feature."
      echo "$RESPONSE"
      exit 1
    fi

    echo "‚úÖ Feature created with ID: $FEATURE_ID"

    echo "Creating User Stories without linking, storing IDs in order..."
    STACKRANK_BASE=1000
    INDEX=0
    CREATED_STORY_IDS=()

    for story in "${USER_STORIES[@]}"; do
      TITLE="${story%%|*}"
      DESC="${story#*|}"
      STACKRANK=$((STACKRANK_BASE + INDEX * 100))

      US_JSON=$(jq -n \
        --arg title "$TITLE" \
        --arg desc "$DESC" \
        --arg area "$AREA_PATH" \
        --argjson stackrank "$STACKRANK" \
        '[
          {"op":"add","path":"/fields/System.Title","value":$title},
          {"op":"add","path":"/fields/System.Description","value":$desc},
          {"op":"add","path":"/fields/System.AreaPath","value":$area},
          {"op":"add","path":"/fields/Microsoft.VSTS.Common.StackRank","value":$stackrank}
        ]')

      US_CREATE_URL="https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/\$User%20Story?api-version=7.0"

      RESPONSE=$(az_curl POST "$US_CREATE_URL" "$US_JSON")

      US_ID=$(echo "$RESPONSE" | jq -r '.id')

      if [[ "$US_ID" == "null" || -z "$US_ID" ]]; then
        echo "‚ùå Failed to create User Story: $TITLE"
        echo "$RESPONSE"
        exit 1
      fi

      echo "   ‚ûï Created User Story: $TITLE (ID: $US_ID) with StackRank: $STACKRANK"
      CREATED_STORY_IDS+=("$US_ID")

      INDEX=$((INDEX + 1))
      sleep 1
    done

    echo "üîó Linking all stories to Feature in correct order..."
    LINKS_JSON="["

    for id in "${CREATED_STORY_IDS[@]}"; do
      STORY_URL="https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$id"
      LINKS_JSON+=$(jq -n --arg url "$STORY_URL" '{op:"add", path:"/relations/-", value:{rel:"System.LinkTypes.Hierarchy-Forward", url:$url}}')
      LINKS_JSON+=","
    done

    LINKS_JSON="${LINKS_JSON%,}]"

    FEATURE_LINK_URL="https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$FEATURE_ID?api-version=7.0"
    az_curl PATCH "$FEATURE_LINK_URL" "$LINKS_JSON"

    echo "‚úÖ All stories linked to Feature in correct order."

  displayName: 'Create Feature and Ordered User Stories'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
