trigger: none

parameters:
  - name: featureTitle
    type: string
    displayName: 'Feature Title'
    default: ''
  - name: parentInput
    type: string
    displayName: 'Parent Work Item URL or ID'
    default: ''

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    set -euo pipefail

    ORG="sovereignhousingassociationvsts"
    PROJECT="Enterprise Data Warehouse"
    PROJECT_URL_ENCODED="Enterprise%20Data%20Warehouse"

    FEATURE_TITLE="${{ parameters.featureTitle }}"
    if [[ -z "$FEATURE_TITLE" ]]; then
      echo "‚ùå Feature Title must be provided."
      exit 1
    fi

    PARENT_INPUT="${{ parameters.parentInput }}"

    function extract_id() {
      local input="$1"
      if [[ "$input" =~ ^[0-9]+$ ]]; then
        echo "$input"
      else
        echo "$input" | grep -oE '[0-9]+' | tail -1
      fi
    }

    # Determine Epic ID and Area Path
    if [[ -z "$PARENT_INPUT" ]]; then
      echo "No parent work item specified. Defaulting to Epic ID 108342 and fixed Area Path."
      EPIC_ID="108342"
      AREA_PATH="Enterprise Data Warehouse\\Data and Analytics"
    else
      EPIC_ID=$(extract_id "$PARENT_INPUT")
      if [[ -z "$EPIC_ID" ]]; then
        echo "‚ùå Could not extract work item ID from input: $PARENT_INPUT"
        exit 1
      fi

      WORK_ITEM_URL="https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$EPIC_ID?api-version=7.0"
      RESPONSE=$(curl -sS -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" "$WORK_ITEM_URL")
      AREA_PATH=$(echo "$RESPONSE" | jq -r '.fields["System.AreaPath"] // empty')

      if [[ -z "$AREA_PATH" || "$AREA_PATH" == "null" ]]; then
        echo "‚ùå Could not retrieve Area Path for work item ID $EPIC_ID"
        exit 1
      fi
    fi

    echo "DEBUG: AREA_PATH=$AREA_PATH"

    # Helper function for API calls
    function call_api() {
      local method="$1"
      local url="$2"
      local data="$3"
      curl -sS -X "$method" \
        -H "Content-Type: application/json-patch+json" \
        -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
        -d "$data" "$url"
    }

    # JSON-safe Feature description
    FEATURE_DESC="<b>Background</b><br>Provide a problem statement / summary of business issue to be addressed. E.g. In July 2022, Vision One performed focus group interviews with Sovereign customers...<br><b>Objective</b><br>State the business goal.<br><b>Benefit</b><br>Provide business benefits.<br><b>In scope</b><br>Overview of work."

    # Create Feature
    FEATURE_JSON=$(jq -n \
      --arg title "$FEATURE_TITLE" \
      --arg area "$AREA_PATH" \
      --arg epic_url "https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$EPIC_ID" \
      --arg desc "$FEATURE_DESC" \
      '[{"op":"add","path":"/fields/System.Title","value":$title},
        {"op":"add","path":"/fields/System.Description","value":$desc},
        {"op":"add","path":"/fields/System.AreaPath","value":$area},
        {"op":"add","path":"/relations/-","value":{"rel":"System.LinkTypes.Hierarchy-Reverse","url":$epic_url}}]')

    FEATURE_RESPONSE=$(call_api POST "https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/\$Feature?api-version=7.0" "$FEATURE_JSON")
    FEATURE_ID=$(echo "$FEATURE_RESPONSE" | jq -r '.id // empty')

    if [[ -z "$FEATURE_ID" || "$FEATURE_ID" == "null" ]]; then
      echo "‚ùå Failed to create Feature."
      echo "$FEATURE_RESPONSE"
      exit 1
    fi

    echo "‚úÖ Created Feature $FEATURE_ID"

    # User Stories array
    USER_STORIES=(
      "01 - Data Acquisition|As a data engineer, I want to ingest source system data into the data lake."
      "02 - Data Validation|As a data engineer, I want to validate data quality upon ingestion."
      "03 - Data Transformation|As a developer, I want to transform ingested data into canonical formats."
      "04 - Data Storage|As a data engineer, I want to store transformed data in the warehouse."
      "05 - Data Modeling|As a data modeler, I want to design data models to support reporting."
      "06 - Reporting Layer|As a BI developer, I want to create semantic layer views for consumption."
      "07 - Security & Access|As a security officer, I want to define access controls on data assets."
      "08 - Monitoring & Alerting|As an operator, I want to monitor data pipelines and receive alerts."
      "09 - Documentation|As a team member, I want to document pipeline processes and data models."
      "10 - Handover & Training|As a project manager, I want to train end-users and handover support."
    )

    STORY_IDS=()

    # Create User Stories
    i=0
    for STORY in "${USER_STORIES[@]}"; do
      ((i++))
      TITLE=$(echo "$STORY" | cut -d'|' -f1)
      DESC=$(echo "$STORY" | cut -d'|' -f2-)

      STORY_JSON=$(jq -n \
        --arg title "$TITLE" \
        --arg desc "$DESC" \
        --arg area "$AREA_PATH" \
        --arg stackrank $((1000 + i * 100)) \
        '[{"op":"add","path":"/fields/System.Title","value":$title},
          {"op":"add","path":"/fields/System.Description","value":$desc},
          {"op":"add","path":"/fields/System.AreaPath","value":$area},
          {"op":"add","path":"/fields/Microsoft.VSTS.Common.StackRank","value":$stackrank}]')

      STORY_RESPONSE=$(call_api POST "https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/\$User%20Story?api-version=7.0" "$STORY_JSON")
      STORY_ID=$(echo "$STORY_RESPONSE" | jq -r '.id // empty')

      if [[ -z "$STORY_ID" || "$STORY_ID" == "null" ]]; then
        echo "‚ùå Failed to create User Story: $TITLE"
        echo "$STORY_RESPONSE"
        exit 1
      fi

      STORY_IDS+=("$STORY_ID")
      echo "   - Created Story $TITLE (ID $STORY_ID)"
    done

    # Link User Stories to Feature with retries
    for STORY_ID in "${STORY_IDS[@]}"; do
      LINK_JSON=$(jq -n --arg feature_url "https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$FEATURE_ID" \
        '[{"op":"add","path":"/relations/-","value":{"rel":"System.LinkTypes.Hierarchy-Forward","url":$feature_url}}]')

      RETRIES=3
      SUCCESS=0
      for (( attempt=1; attempt<=RETRIES; attempt++ )); do
        LINK_RESPONSE=$(call_api PATCH "https://dev.azure.com/$ORG/$PROJECT_URL_ENCODED/_apis/wit/workitems/$STORY_ID?api-version=7.0" "$LINK_JSON")
        LINK_ID=$(echo "$LINK_RESPONSE" | jq -r '.id // empty')
        if [[ -n "$LINK_ID" ]]; then
          SUCCESS=1
          echo "   - Linked Story ID $STORY_ID to Feature $FEATURE_ID"
          break
        else
          echo "‚ö† Attempt $attempt: Failed to link Story $STORY_ID. Retrying..."
          sleep 2
        fi
      done

      if [[ $SUCCESS -ne 1 ]]; then
        echo "‚ö† Failed to link Story ID $STORY_ID to Feature $FEATURE_ID after $RETRIES attempts. Skipping."
      fi
    done

    echo "üéâ Feature $FEATURE_ID and ${#STORY_IDS[@]} User Stories created and linked (where possible)."
  displayName: 'Create Feature and Ordered User Stories'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
